#include<unistd.h>
#include<stdio.h>
#include<errno.h>
#include<time.h>
#include<sys/types.h>
#include<linux/sem.h>
#include<linux/shm.h>

#define MAXSHM 5

/*定义信号量内部标识*/
int fullid;
int emptyid;
int mutexid;

int main()
{
 struct sembuf p,v;
 union semun arg;
 
 int arrayid;
 int getid;

 int * array;
 int * get;

 arrayid = shmget(IPC_PRIVATE,sizeof(int)*MAXSHM,IPC_CREAT|0666);
 getid = shmget(IPC_PRIVATE,sizeof(int),IPC_CREAT|0666);

 array = (int *)shmat(arrayid,0,0);
 get = (int *)shmat(getid,0,0);
 *get = 0;

 fullid = semget(IPC_PRIVATE,1,IPC_CREAT|0666);
 emptyid = semget(IPC_PRIVATE,1,IPC_CREAT|0666);
 mutexid = semget(IPC_PRIVATE,1,IPC_CREAT|0666);

 arg.val = 0;
 if(semctl(fullid,0,SETVAL,arg) == -1)perror("semctl setval error");
 arg.val = MAXSHM;
 if(semctl(emptyid,0,SETVAL,arg) == -1)perror("semctl setval error");
 arg.val = 1;
 if(semctl(mutexid,0,SETVAL,arg) == -1)perror("semctl setval error");

 p.sem_num = 0;
 p.sem_op = -1;
 p.sem_flg = SEM_UNDO;
 v.sem_num = 0;
 v.sem_op = 1;
 v.sem_flg = SEM_UNDO;
 
 if(fork() == 0)
 {
   int i = 0;
   int set = 0;
   while(i < 10)
   {
     semop(emptyid,&p,1);
     semop(mutexid,&p,1);
     array[set%MAXSHM] = i+1;
     printf("Producer put number %d to NO.%d\n",array[set%MAXSHM],set%MAXSHM);
     set++;
     semop(mutexid,&v,1);
     semop(fullid,&v,1);
     i++;
   }
   sleep(3);
   printf("Producer is over\n");
   exit(0);
 }
 else
 {
   if(fork() == 0)
   {
     while(1)
     {
       if(*get == 10)
         break;
       semop(fullid,&p,1);
       semop(mutexid,&p,1);
       printf("The Comsumer A get number from NO.%d\n",(*get)%MAXSHM);
       (*get)++;
       semop(mutexid,&v,1);
       semop(emptyid,&v,1);
       sleep(1);
     }
     printf("Consumer A is over\n");
     exit(0);
   }
   else
   {
     if(fork() == 0)
     {
       while(1)
       {
         if(*get == 10)
           break;
         semop(fullid,&p,1);
         semop(mutexid,&p,1);
         printf("The Consumer B get number from NO.%d\n",(*get)%MAXSHM);
         (*get)++;
         semop(mutexid,&v,1);
         semop(emptyid,&v,1);
         sleep(1);
       }
       printf("Consumer B is over\n");
       exit(0);       
     }
   }
 }
 wait(0);
 wait(0);
 wait(0);
 shmdt(array);
 shmctl(arrayid,IPC_RMID,0);
 shmdt(get);
 shmctl(emptyid,IPC_RMID,0);

 semctl(emptyid,IPC_RMID,0);
 semctl(fullid,IPC_RMID,0);
 semctl(mutexid,IPC_RMID,0);
 exit(0);
}